#+TITLE: Emacs Config

* Sensible defaults

Be sure and clone [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] into ~/.emacs.d/lib

=mkdir -p ~/.emacs.d/lib/ && cd ~/.emacs.d/lib/ && git clone https://github.com/hrs/sensible-defaults.el=

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/lib/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/bind-home-and-end-keys)
  (sensible-defaults/set-default-line-length-to 140)
#+END_SRC

I use some of my own custom defaults as well

#+BEGIN_SRC emacs-lisp
  ;; store backups and autosaves in ~/.cache instead of the same dir as the file
  (setq backup-directory-alist
        '((".*" . "~/.cache/emacs/backup/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/.cache/emacs/autosave/" t)))

  ;; create those directories if they don't already exist
  (if (file-directory-p "~/.cache/emacs/backup/") () (make-directory "~/.cache/emacs/backup/" t))
  (if (file-directory-p "~/.cache/emacs/autosave/") () (make-directory "~/.cache/emacs/autosave/" t))

  ;; use a custom file instead of init.el for those pesky packages that add custom variables
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

* UI settings

** Theme

use solarized dark theme, don't change fonts for headers

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (setq solarized-use-variable-pitch nil
          solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC

** Other settings

#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers 'relative)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq-default global-visual-line-mode t)
#+END_SRC

* Evil

** evil leader

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :config
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode)
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
  )
#+END_SRC

** base evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :after (evil-leader)
    :config
    (evil-mode t)
  )
  (setq evil-org-retain-visual-state-on-shift t)
#+END_SRC

** evil collection

useful for things like ibuffer, which do not have evil keys by default

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :ensure t
    :after (evil))
#+END_SRC

* Org mode

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after (evil org)
    :hook
    (org-mode . evil-org-mode)
    :config
    (evil-leader/set-key "ol" 'org-store-link
                         "oa" 'org-agenda
                         "oc" 'org-capture
                         "ob" 'org-switchb)
    (setq org-directory "~/data/org/"
          org-default-notes-file (concat org-directory "notes.org")
          org-cycle-separator-lines 1
          org-M-RET-may-split-line nil
          org-agenda-start-with-follow-mode t
          org-agenda-start-day "-1d"
          org-agenda-start-on-weekday nil)
    (setq org-capture-templates
          '(
            ("g"
             "General Todo"
             entry
             (file+headline "/keybase/private/rythmyr/org/todo.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("a"
             "Appointment"
             entry
             (file+headline "/keybase/private/rythmyr/org/events.org" "Appointments")
             "* %?\nSCHEDULED: %^{Start Time}T")
            ("j"
             "Journal"
             entry
             (file+datetree "/keybase/private/rythmyr/org/life.org")
             "* %?\nEntered on %U\n  %i\n  %a")
          ))
    (setq org-agenda-files '("/keybase/private/rythmyr/org/events.org"
                             "/keybase/private/rythmyr/org/todo.org"
                             "~/data/org/todo.org"))
    (add-hook 'org-mode-hook #'(lambda ()
                                 (org-indent-mode)
                                 (visual-line-mode)))
  )
  #+END_SRC

* Programming

** Overall

*** editorconfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC

*** company, for completions

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 250))
#+END_SRC

*** projectile, for keeping projects separate

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )
#+END_SRC

*** magit, for git integration

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  (use-package evil-magit
    :ensure t
    :after (evil magit)
    :config
    (evil-leader/set-key "gs" 'magit-status)
  )
#+END_SRC

** Unity 3d (C Sharp)

#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :hook ((csharp-mode . omnisharp-mode)
           (csharp-mode . flycheck-mode)
           (csharp-mode . company-mode))
    :config
    (add-to-list 'company-backends 'company-omnisharp)
    (evil-leader/set-key-for-mode 'omnisharp-mode "d" 'omnisharp-go-to-definition
                                                  "u" 'omnisharp-find-usages
                                                  "i" 'omnisharp-fix-code-issue-at-point
                                                  "r" 'omnisharp-rename))
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :commands tide-setup
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (typescript-mode . flycheck-mode)
           (typescript-mode . eldoc-mode)
           (typescript-mode . company-mode)
           )
    :config
    (setq tide-tsserver-executable "node_modules/typescript/bin/tsserver")
    (evil-leader/set-key-for-mode 'typescript-mode "d" 'tide-jump-to-definition
                                                   "u" 'tide-references
                                                   "r" 'tide-rename-symbol
                                                   "f" 'tide-fix
                                                   "o" 'tide-organize-imports
                                                   "e" 'tide-error-at-point))
#+END_SRC

* My functions/keybinds

** Edit files

*** config

#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (evil-leader/set-key "ec" 'ryth/edit-config)
  (defun ryth/edit-local-config ()
    (interactive)
    (find-file "~/.emacs.d/local.org"))
  (evil-leader/set-key "elc" 'ryth/edit-local-config)
#+END_SRC

*** todos

#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-todos ()
    (interactive)
    (find-file "/keybase/private/rythmyr/org/todo.org"))
  (evil-leader/set-key "et" 'ryth/edit-todos)
  (defun ryth/edit-local-todos ()
    (interactive)
    (find-file "~/data/org/todo.org"))
  (evil-leader/set-key "elt" 'ryth/edit-local-todos)
#+END_SRC

*** notes

#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-notes ()
    (interactive)
    (find-file "/keybase/private/rythmyr/org/notes.org"))
  (evil-leader/set-key "en" 'ryth/edit-config)
  (defun ryth/edit-local-notes ()
    (interactive)
    (find-file "~/data/org/notes.org"))
  (evil-leader/set-key "eln" 'ryth/edit-config)
#+END_SRC

** Reload config

#+BEGIN_SRC emacs-lisp
  (defun ryth/reload-config ()
    (interactive)
    (load user-init-file))
  (evil-leader/set-key "cr" 'ryth/reload-config)
#+END_SRC

* Misc

** ido

for better buffer/file switching (C-x b and C-x C-f)

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (evil-leader/set-key "gf" 'ido-find-file)
#+END_SRC

** ibuffer

for a better buffer list

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :after (evil-collection)
    :config
    (evil-ex-define-cmd "ls" 'ibuffer)
    (evil-collection-ibuffer-setup))
#+END_SRC
